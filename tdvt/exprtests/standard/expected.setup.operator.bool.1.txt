<results>
  <test name='not bool0'>
    <sql>
      
    </sql>
    <query-time>
      0.000
    </query-time>
    <error>
      not is being called with (integer), did you mean (boolean)?&#10;
    </error>
    <error-type>
      Invalid Expression
    </error-type>
    <table>
    </table>
  </test>
  <test name='NULL'>
    <sql>
      SELECT NULL AS &quot;TEMP(Test)(496893948)(0)&quot;&#10;FROM &quot;TestV1&quot;.&quot;Calcs&quot; &quot;Calcs&quot;&#10;GROUP BY ()
    </sql>
    <query-time>
      21.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.oracle].[TEMP(Test)(496893948)(0)]</column>
      </schema>
      <tuple>
        <value>%null%</value>
      </tuple>
    </table>
  </test>
  <test name='TRUE'>
    <sql>
      SELECT 1 AS &quot;TEMP(Test)(1507734681)(0)&quot;&#10;FROM &quot;TestV1&quot;.&quot;Calcs&quot; &quot;Calcs&quot;&#10;GROUP BY ()
    </sql>
    <query-time>
      21.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.oracle].[TEMP(Test)(1507734681)(0)]</column>
      </schema>
      <tuple>
        <value>true</value>
      </tuple>
    </table>
  </test>
  <test name='FALSE'>
    <sql>
      SELECT 0 AS &quot;TEMP(Test)(1303362598)(0)&quot;&#10;FROM &quot;TestV1&quot;.&quot;Calcs&quot; &quot;Calcs&quot;&#10;GROUP BY ()
    </sql>
    <query-time>
      19.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.oracle].[TEMP(Test)(1303362598)(0)]</column>
      </schema>
      <tuple>
        <value>false</value>
      </tuple>
    </table>
  </test>
  <test name='bool0 AND bool1'>
    <sql>
      
    </sql>
    <query-time>
      0.000
    </query-time>
    <error>
      Can&apos;t logically &apos;and&apos; integer and integer values&#10;
    </error>
    <error-type>
      Invalid Expression
    </error-type>
    <table>
    </table>
  </test>
  <test name='bool0 == bool1'>
    <sql>
      SELECT (CASE WHEN (&quot;Calcs&quot;.&quot;bool0_&quot; = &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 1 WHEN NOT (&quot;Calcs&quot;.&quot;bool0_&quot; = &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 0 ELSE NULL END) AS &quot;TEMP(Test)(830571724)(0)&quot;&#10;FROM &quot;TestV1&quot;.&quot;Calcs&quot; &quot;Calcs&quot;&#10;GROUP BY (CASE WHEN (&quot;Calcs&quot;.&quot;bool0_&quot; = &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 1 WHEN NOT (&quot;Calcs&quot;.&quot;bool0_&quot; = &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 0 ELSE NULL END)
    </sql>
    <query-time>
      26.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.oracle].[TEMP(Test)(830571724)(0)]</column>
      </schema>
      <tuple>
        <value>%null%</value>
      </tuple>
      <tuple>
        <value>false</value>
      </tuple>
      <tuple>
        <value>true</value>
      </tuple>
    </table>
  </test>
  <test name='bool0 != bool1'>
    <sql>
      SELECT (CASE WHEN (&quot;Calcs&quot;.&quot;bool0_&quot; &lt;&gt; &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 1 WHEN NOT (&quot;Calcs&quot;.&quot;bool0_&quot; &lt;&gt; &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 0 ELSE NULL END) AS &quot;TEMP(Test)(3090944671)(0)&quot;&#10;FROM &quot;TestV1&quot;.&quot;Calcs&quot; &quot;Calcs&quot;&#10;GROUP BY (CASE WHEN (&quot;Calcs&quot;.&quot;bool0_&quot; &lt;&gt; &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 1 WHEN NOT (&quot;Calcs&quot;.&quot;bool0_&quot; &lt;&gt; &quot;Calcs&quot;.&quot;bool1_&quot;) THEN 0 ELSE NULL END)
    </sql>
    <query-time>
      27.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.oracle].[TEMP(Test)(3090944671)(0)]</column>
      </schema>
      <tuple>
        <value>%null%</value>
      </tuple>
      <tuple>
        <value>false</value>
      </tuple>
      <tuple>
        <value>true</value>
      </tuple>
    </table>
  </test>
  <test name='bool0 or bool1'>
    <sql>
      
    </sql>
    <query-time>
      0.000
    </query-time>
    <error>
      Can&apos;t logically &apos;or&apos; integer and integer values&#10;
    </error>
    <error-type>
      Invalid Expression
    </error-type>
    <table>
    </table>
  </test>
</results>
