<results>
  <test name='STR([int1])'>
    <sql>
      SELECT CONCAT(`Calcs`.`int1`) AS `TEMP(Test)(2617331766)(0)`&#10;FROM `Calcs`&#10;GROUP BY 1
    </sql>
    <query-time>
      59.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.memsql].[TEMP(Test)(2617331766)(0)]</column>
      </schema>
      <tuple>
        <value>%null%</value>
      </tuple>
      <tuple>
        <value>&quot;-3&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;-4&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;-6&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;-8&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;-9&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;2&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;3&quot;</value>
      </tuple>
    </table>
  </test>
  <test name='STR([bool0])'>
    <sql>
      SELECT (CASE&#10;&#9;WHEN (`Calcs`.`bool0_` &lt;&gt; 0) THEN &apos;1&apos;&#10;&#9;WHEN NOT (`Calcs`.`bool0_` &lt;&gt; 0) THEN &apos;0&apos;&#10;&#9;ELSE NULL END) AS `TEMP(Test)(3200082645)(0)`&#10;FROM `Calcs`&#10;GROUP BY 1
    </sql>
    <query-time>
      55.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.memsql].[TEMP(Test)(3200082645)(0)]</column>
      </schema>
      <tuple>
        <value>%null%</value>
      </tuple>
      <tuple>
        <value>&quot;0&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;1&quot;</value>
      </tuple>
    </table>
  </test>
  <test name='STR([num2])'>
    <sql>
      SELECT CONCAT(`Calcs`.`num2`) AS `TEMP(Test)(3049448927)(0)`&#10;FROM `Calcs`&#10;GROUP BY 1
    </sql>
    <query-time>
      55.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.memsql].[TEMP(Test)(3049448927)(0)]</column>
      </schema>
      <tuple>
        <value>%null%</value>
      </tuple>
      <tuple>
        <value>&quot;10.98&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;11.50&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;11.69&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;13.04&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;16.73&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;17.25&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;17.86&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;3.79&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;6.46&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;6.80&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;7.87&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;8.51&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;8.98&quot;</value>
      </tuple>
    </table>
  </test>
  <test name='STR([str2])'>
    <sql>
      SELECT SUBSTRING(`Calcs`.`str2`, 1, 1024) AS `TEMP(Test)(3494867617)(0)`&#10;FROM `Calcs`&#10;GROUP BY 1
    </sql>
    <query-time>
      59.000
    </query-time>
    <table>
      <schema>
        <column>[cast_calcs.memsql].[TEMP(Test)(3494867617)(0)]</column>
      </schema>
      <tuple>
        <value>%null%</value>
      </tuple>
      <tuple>
        <value>&quot;eight&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;eleven&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;fifteen&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;five&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;fourteen&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;nine&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;one&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;six&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;sixteen&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;ten&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;three&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;twelve&quot;</value>
      </tuple>
      <tuple>
        <value>&quot;two&quot;</value>
      </tuple>
    </table>
  </test>
</results>
